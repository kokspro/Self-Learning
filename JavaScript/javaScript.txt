FUN SHORTCUTS FOR ME:
    Highlight and ( will place them outside
    Highlight + Alt + Arrow moves 

LINKS:
<script src="source_name"></script> ---- How to link js to hrml

BASICS:
    OBJECTS:
        REFERENCE TYPES:
            OBJECT:
                let person = {
                    name: 'Mosh',
                    age: 40
                };
                person.name;
                person['name'];
            ARRAY:
                let selected = [];
            FUNCTION:
                function nameIt() {}

OPERATORS:
    //Leaving out universal/common knowledge
    ARITHMETIC OPERATORS:
    ASSIGNMENT OPERATORS:
    COMPARISON OPERATORS:
    EQUALITY OPERATORS:
        === (Equals) (Strict Equality Same Type + Value)
        !== (Does not Equal)
        ==  (Equals) (Loose Equality converts the right side type to match left side type, checks values after)
        != (Does not Equal)
    TERNARY OPERATORS:
        conditional ? 'true option' : 'false option';
    LOGICAL OPERATORS:
    LOGICAL OPERATORS WITH NON-BOOLEANS:
        Falsy (false):
            undefined
            null
            0
            false
            ''
            NaN
        Truthy (true):
            Anything NOT Falsy
    BITWISE OPERATORS:
            Technical and super niche, not taking notes.   
            Can always go back and refresh if I need.
            It is just logical using bits, easy peasy actually.

CONTROL FLOW:
    IF ELSE:
    SWITCH CASE:
        switch (role) {
            case 'value':
                statement;
                break;
            default:
                statement;
        }
    FOR:
        for (let i = 0; i <= 10; i++) {}
    WHILE:
    DO WHILE:
    FOR IN: - Better for properties of an object
        for (let var in otherThing) {}
    FOR OF: - Better for elements in an array
        for (let var of array?) {}
    BREAK AND CONTINUE:
        break; to exit a loop
        continue; to jump to top of loop

OBJECTS:
    FACTORY:
        function createCircle() {
            const circle =  {
               radius: 1,
               location: {
                    x: 1,
                    y: 1
                },
                isVisible: true,
               draw: function() {
                  console.log('draw');
                }
            };
        return circle; 
        }
        More concise factory function in app.js

    CONSTRUCTOR:
        USE PASCAL NOTATION: OneTwoThreeFour, first of each caps 
        Example in app.js

    CLONING:
        Use a for in loop with bracket notation, easy peasy
        Or, Object.assign  Example in app.js
        Or, const another = { ...object }

    MATH:
        Math.random() * (max - min) + min; for random in range
    
    STRING:
        String primitives get turned into wrapped in object with dot notation
        Docs for sure.
        .replace creates a new string and does not modify the original
        Excape notation is a thing using \

    TEMPLATE LITERALS:
        ${} is for variable

    DATE:
        const date = new Date(); 
        can use up and down arrows to display how dates is displayed
        Month is 0 based
        .toDateString()
        .toTimeString()
        .toISOString()
        These are good ways to record for applications and talk with server (ISO)

    
ARRAYS:
    ADDING:
        array.push(adds to the end)
        array.unshift(adds to beginning)
        array.splice(start index, number of elements to delete, however many elements to add)
    FINDING ELEMENTS:
        PRIMITIVES:
            array.indexOf()
            array.lastIndexOf()
            array.includes()
            Searches can have an optional parameter of index to start searching from
        REFERENCE TYPES(OBJECT):
            Little more complicated, maybe refresh, example in app.js   
            array.find(function(element) {body})
            array.findIndex(function(element) {body})
        ARROW FUNCTIONS:
            Example under previous example in app.js

        //removing elements start 
         